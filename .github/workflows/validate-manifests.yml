name: Validate Manifests

on:
  pull_request:
    branches: [main]
    paths:
      - 'clusters/**'
      - '.github/workflows/validate-manifests.yml'
  push:
    branches: [main]
    paths:
      - 'clusters/**'
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout manifests repo
        uses: actions/checkout@v4

      - name: Setup Flux CLI
        run: |
          curl -s https://fluxcd.io/install.sh | sudo FLUX_VERSION=2.2.3 bash

      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Validate YAML syntax
        run: |
          find clusters/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating $file"
            yq eval . "$file" > /dev/null || exit 1
          done

      - name: Validate Flux manifests
        run: |
          find clusters/ -name "*.yaml" -o -name "*.yml" -exec flux validate {} \;

      - name: Build and validate Kustomizations
        run: |
          # Find all kustomization.yaml files and validate them
          find clusters/ -name "kustomization.yaml" -exec dirname {} \; | while read dir; do
            echo "Validating kustomization in $dir"
            cd "$dir"
            kustomize build . > /tmp/rendered.yaml
            kubeval /tmp/rendered.yaml --ignore-missing-schemas
            cd - > /dev/null
          done

      - name: Check for required resources
        run: |
          echo "Checking for required Kubernetes resources..."
          
          # Check if GitRepository exists
          if ! grep -r "kind: GitRepository" clusters/; then
            echo "ERROR: No GitRepository found"
            exit 1
          fi
          
          # Check if main Kustomization exists
          if ! grep -r "kind: Kustomization" clusters/; then
            echo "ERROR: No Kustomization found"
            exit 1
          fi
          
          # Check if HelmRepository exists for required charts
          REQUIRED_HELM_REPOS=("traefik" "prometheus-community" "grafana")
          for repo in "${REQUIRED_HELM_REPOS[@]}"; do
            if ! grep -r "name: $repo" clusters/; then
              echo "ERROR: Required HelmRepository '$repo' not found"
              exit 1
            fi
          done
          
          # Check if HelmRelease exists for required releases
          REQUIRED_RELEASES=("traefik" "kube-prometheus-stack" "loki")
          for release in "${REQUIRED_RELEASES[@]}"; do
            if ! grep -r "name: $release" clusters/*/infrastructure/*/; then
              echo "ERROR: Required HelmRelease '$release' not found"
              exit 1
            fi
          done
          
          echo "All required resources found!"

      - name: Security checks
        run: |
          echo "Running security checks..."
          
          # Check for hardcoded secrets (but allow admin for development)
          if grep -r -i "password.*:" clusters/ | grep -v "admin" | grep -v "adminPassword"; then
            echo "WARNING: Potential hardcoded passwords found"
          fi
          
          # Check for insecure configurations
          if grep -r "runAsUser: 0" clusters/; then
            echo "WARNING: Containers running as root found"
          fi
          
          # Check for missing resource limits in HelmReleases
          find clusters/ -name "*.yaml" -exec grep -l "kind: HelmRelease" {} \; | while read file; do
            if ! grep -A 50 "values:" "$file" | grep -q "limits:"; then
              echo "INFO: $file may want resource limits configured"
            fi
          done
          
          echo "Security check completed"

      - name: Generate validation report
        if: always()
        run: |
          echo "## Validation Report" > validation-report.md
          echo "" >> validation-report.md
          echo "### Files validated:" >> validation-report.md
          find clusters/ -name "*.yaml" -o -name "*.yml" | wc -l >> validation-report.md
          echo "" >> validation-report.md
          echo "### Structure:" >> validation-report.md
          if command -v tree > /dev/null; then
            tree clusters/ >> validation-report.md
          else
            find clusters/ -type f | sort >> validation-report.md
          fi
          
          cat validation-report.md

      - name: Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-results
          path: |
            validation-report.md
          retention-days: 7
